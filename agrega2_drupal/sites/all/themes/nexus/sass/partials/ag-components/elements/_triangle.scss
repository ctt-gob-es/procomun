/**
Adds a triangle in the middle bottom
It adds position:relative to the container and a pseudo element
*/
@mixin triangle($triangle-width: 10px, $triangle-height: 20px, $triangle-color: $triangle, $posx: 50%, $orientation: bottom, $set: outset, $pseudo: "after") {

  position: relative;

  &:#{$pseudo} {
    content: "";
    position: absolute;
    visibility: visible;

    @if $set == inset {
      @if $orientation == right {
        right: 0;
        top: $posx;
        //margin-top: -($w / 2);
        margin-top: -$triangle-width;
        border-top: $triangle-width solid rgba($triangle-color, 0);
        border-left: $triangle-width solid rgba($triangle-color, 0);
        border-right: $triangle-height solid $triangle-color;
        border-bottom: $triangle-width solid rgba($triangle-color, 0);

      } @else if $orientation == left {
        left: 0;
        top: $posx;
        margin-top: -$triangle-width;
        border-top: $triangle-width solid rgba($triangle-color, 0);
        border-left: $triangle-height solid $triangle-color;
        border-right: $triangle-width solid rgba($triangle-color, 0);
        border-bottom: $triangle-width solid rgba($triangle-color, 0);

      } @else if $orientation == top {
        top: 0;
        left: $posx;
        margin-left: -$triangle-width;
        border-top: $triangle-height solid $triangle-color;
        border-left: $triangle-width solid rgba($triangle-color, 0);
        border-right: $triangle-width solid rgba($triangle-color, 0);
        border-bottom: $triangle-width solid rgba($triangle-color, 0);

      } @else {
        bottom: 0;
        left: $posx;
        margin-left: -$triangle-width;
        border-top: $triangle-width solid rgba($triangle-color, 0);
        border-left: $triangle-width solid rgba($triangle-color, 0);
        border-right: $triangle-width solid rgba($triangle-color, 0);
        border-bottom: $triangle-height solid $triangle-color;
      }

    } @else {

      @if $orientation == right {
        right: 0;
        top: $posx;
        //margin-top: -($w / 2);
        margin-top: -$triangle-width;
        margin-right: -($triangle-height*2);
        border-top: $triangle-width solid rgba($triangle-color, 0);
        border-left: $triangle-height solid $triangle-color;
        border-right: $triangle-width solid rgba($triangle-color, 0);
        border-bottom: $triangle-width solid rgba($triangle-color, 0);

      } @else if $orientation == left {
        left: 0;
        top: $posx;
        margin-top: -$triangle-width;
        margin-left: -($triangle-height*2);
        border-top: $triangle-width solid rgba($triangle-color, 0);
        border-left: $triangle-width solid rgba($triangle-color, 0);
        border-right: $triangle-height solid $triangle-color;
        border-bottom: $triangle-width solid rgba($triangle-color, 0);

      } @else if $orientation == top {
        top: 0;
        left: $posx;
        margin-left: -$triangle-width;
        margin-top: -($triangle-height*2);
        border-top: $triangle-width solid rgba($triangle-color, 0);
        border-left: $triangle-width solid rgba($triangle-color, 0);
        border-right: $triangle-width solid rgba($triangle-color, 0);
        border-bottom: $triangle-height solid $triangle-color;

      } @else {
        bottom: 0;
        left: $posx;
        margin-left: -$triangle-width;
        margin-bottom: -($triangle-height * 2);
        border-top: $triangle-height solid $triangle-color;
        border-left: $triangle-width solid rgba($triangle-color, 0);
        border-right: $triangle-width solid rgba($triangle-color, 0);
        border-bottom: $triangle-width solid rgba($triangle-color, 0);
      }
    }
  }
}

// Triangle not rectangular used for adding an arrow
@mixin triangle_dialog($triangular-color: $white, $background-color: $lightest_gray, $left: 30px, $orientation: "bottom", $direction: "left-right") {

  $width: 16px;
  @include triangle($width, $width, $triangular-color, $left, $orientation, outset, before);

  $left-2: $left + (1.5 * $width);
  @if ( $direction == "right-left" ){
    $left-2: $left - $width;
  }

  @include triangle($width, $width, $background-color, $left-2, $orientation);

  @if ( $direction == "left-right" ){
    &:before {
      border-left-width: $width * 2;
      border-right-width: 0;
    }
    &:after {
      border-left-width: $width / 2;
    }
  } @else {
    &:before {
      border-right-width: $width * 2;
      border-left-width: 0;
    }
    &:after {
      border-right-width: $width / 2;
    }
  }

}
